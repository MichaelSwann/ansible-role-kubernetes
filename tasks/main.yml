---
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- include_tasks: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'

- include_tasks: setup-Debian.yml
  when: ansible_os_family == 'Debian'

- name: Ensure dependencies are installed.
  package:
    name: curl
    state: present

- name: Install Kubernetes packages.
  package:
    name: "{{ item.name | default(item) }}"
    state: "{{ item.state | default('present') }}"
  notify: restart kubelet
  with_items: "{{ kubernetes_packages }}"

- include_tasks: sysctl-setup.yml

- include_tasks: kubelet-setup.yml

- name: Ensure kubelet is started and enabled at boot.
  service:
    name: kubelet
    state: started
    enabled: true

- name: Check if Kubernetes has already been initialized.
  stat:
    path: /etc/kubernetes/admin.conf
  register: kubernetes_init_stat

- name: Get Kubernetes bootstrap token.
  command: kubeadm token generate
  register: kubernetes_bootstrap_token_command
  when: kubernetes_role == 'master'

- name: Get Kubernetes certificate key.
  command: kubeadm certs certificate-key
  register: kubernetes_init_certificate_key_command
  when: kubernetes_role == 'master'

- name: Set the bootstrap token and certificate globally
  set_fact:
    kubernetes_bootstrap_token: "{{ kubernetes_bootstrap_token_command.stdout }}"
    kubernetes_init_certificate_key: "{{ kubernetes_init_certificate_key_command.stdout }}"
  when: kubernetes_bootstrap_token_command.stdout is defined
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups['all'] }}"

# Set up master.
- include_tasks: master-setup.yml
  when: kubernetes_role == 'master'

# Set up nodes.
- name: Get the kubeadm join command from the Kubernetes master.
  shell: kubeadm token create --print-join-command | sed 's/$/--cri-socket unix\:\/\/\/run\/containerd\/containerd.sock/'
  changed_when: false
  when: kubernetes_role == 'master'
  register: kubernetes_join_command_result

- name: Set the kubeadm join command globally.
  set_fact:
    kubernetes_join_command: >
      {{ kubernetes_join_command_result.stdout }}
      {{ kubernetes_join_command_extra_opts }}
  when: kubernetes_join_command_result.stdout is defined
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups['all'] }}"

- name: Debug Kubernetes join command
  debug:
    var: kubernetes_join_command
  when: kubernetes_role == 'master'

- name: Wait for the master node to create all the control-plane pods.
  shell: "kubectl get pod --namespace=kube-system --selector tier=control-plane --output=jsonpath='{.items[*].metadata.name}'"
  register: master_control_plane_pods_created
  until: item in master_control_plane_pods_created.stdout
  retries: 10
  delay: 30
  with_items:
    - etcd
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
  when: kubernetes_role == 'master'

- name: Wait for master node control-plane pods become ready.
  shell: "kubectl wait --namespace=kube-system --for=condition=Ready pods --selector tier=control-plane --timeout=600s"
  register: master_control_plane_pods_ready
  when: kubernetes_role == 'master'

- debug: var=master_control_plane_pods_ready.stdout_lines

- include_tasks: master-join.yml
  when: kubernetes_role == 'controlplanenode'

- name: Wait for all the control-plane pods.
  shell: "kubectl get pod --namespace=kube-system --selector tier=control-plane --output=jsonpath='{.items[*].metadata.name}'"
  register: control_plane_pods_created
  until: item in control_plane_pods_created.stdout
  retries: 10
  delay: 30
  with_items:
    - etcd
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
  when: kubernetes_role == 'master'

- name: Wait for control-plane pods become ready.
  shell: "kubectl wait --namespace=kube-system --for=condition=Ready pods --selector tier=control-plane --timeout=600s"
  register: control_plane_pods_ready
  when: kubernetes_role == 'master'

- debug: var=control_plane_pods_ready.stdout_lines

- include_tasks: node-setup.yml
  when: kubernetes_role == 'node'

- name: Wait for all the calico pods to be created.
  shell: "kubectl get pod --namespace=kube-system --selector k8s-app=calico-node --output=jsonpath='{.items[*].metadata.name}'"
  register: calico_pods_created
  until: item in calico_pods_created.stdout
  retries: 10
  delay: 30
  with_items:
    - calico
  when: kubernetes_role == 'master'

- name: Wait for calico pods become ready.
  shell: "kubectl wait --namespace=kube-system --for=condition=Ready pods --selector k8s-app=calico-node --timeout=600s"
  register: calico_pods_ready
  when: kubernetes_role == 'master'

- debug: var=calico_pods_ready.stdout_lines